<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (c) 2010-2011 ESRI

     All rights reserved under the copyright laws of the United States
     and applicable international laws, treaties, and conventions.

     You may freely redistribute and use this sample code, with or
     without modification, provided you include the original copyright
     notice and use restrictions.

     See use restrictions in use_restrictions.txt.
-->
<!---
The default skin class for a Legend component.
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
             xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:mx="library://ns.adobe.com/flex/mx"
             initialize="sparkskin1_initializeHandler(event)">

    <!-- host component -->
    <fx:Metadata>
        /**
        * A strongly typed property that references the component to which this skin is applied.
        */
        [HostComponent("com.esri.ags.components.Legend")]
    </fx:Metadata>

    <!-- states -->
    <s:states>
        <s:State name="normal"/>
        <s:State name="disabled"/>
        <s:State name="loading"/>
    </s:states>

    <s:layout>
        <s:VerticalLayout horizontalAlign="center"/>
    </s:layout>

    <fx:Script>
        <![CDATA[
			import com.esri.ags.Map;
			import com.esri.ags.events.ExtentEvent;
			import com.esri.ags.events.LayerEvent;
			import com.esri.ags.layers.ArcGISDynamicMapServiceLayer;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.KMLLayer;
			import com.esri.ags.layers.Layer;
			import com.esri.ags.layers.supportClasses.LayerInfo;
			import com.esri.ags.layers.supportClasses.LayerLegendInfo;
			import com.esri.ags.renderers.ClassBreaksRenderer;
			import com.esri.ags.renderers.supportClasses.ClassBreakInfo;
			import com.esri.ags.skins.supportClasses.LegendGroupItemRenderer;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Spacer;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			
			import spark.components.DataGroup;
			import spark.components.HGroup;
			import spark.components.Label;

            private var _legendCollectionChanged:Boolean;
            private var _changeWatcher:ChangeWatcher;
            private var _visibleLayersChangeWatcher:ChangeWatcher;
            private var _itemRenderer:LegendGroupItemRenderer = new LegendGroupItemRenderer;

            [Bindable]
            [Embed(source="assets/loading1.swf")]
            private var loader:Class;

            private function sparkskin1_initializeHandler(event:FlexEvent):void
            {
                _changeWatcher = ChangeWatcher.watch(hostComponent, "legendCollection", legendCollectionChangeHandler);
            }

            private function legendCollectionChangeHandler(event:Event = null):void
            {
                invalidateProperties();
                _legendCollectionChanged = true;
            }

            /**
             * @private
             */
            override protected function commitProperties():void
            {
                super.commitProperties();

                if (_legendCollectionChanged)
                {
                    _legendCollectionChanged = false;

                    //First remove all service groups
                    for (var element:int = 0; element < vGrp.numElements; )
                    {
                        if (vGrp.getElementAt(element) && (vGrp.getElementAt(element) is VGroup || vGrp.getElementAt(element) is Spacer))
                        {
                            vGrp.removeElement(vGrp.getElementAt(element));
                            element--;
                        }
                        else
                        {
                            element++;
                        }
                    }

                    if (hostComponent.legendCollection)
                    {
                        noLegendImage.visible = noLegendImage.includeInLayout = false;

                        //extent change
                        hostComponent.map.removeEventListener(ExtentEvent.EXTENT_CHANGE, extentChangeHandler);
                        hostComponent.map.addEventListener(ExtentEvent.EXTENT_CHANGE, extentChangeHandler);

                        for (var i:Number = 0; i < hostComponent.legendCollection.length; i++)
                        {
                            if (hostComponent.legendCollection[i].layerLegendInfos && hostComponent.legendCollection[i].layerLegendInfos.length > 0)
                            {
                                var serviceGroup:VGroup = new VGroup;
                                serviceGroup.name = hostComponent.legendCollection[i].layer.id;

                                var serviceLabel:Label = new Label;
                                serviceLabel.text = hostComponent.legendCollection[i].title;
                                serviceLabel.setStyle("fontWeight", "bold");

                                serviceGroup.addElement(serviceLabel);
                                serviceGroup.addElement(new Spacer());

                                vGrp.addElement(serviceGroup);
                                vGrp.addElement(new Spacer());

                                // check visibility and scale range
                                if (Layer(hostComponent.legendCollection[i].layer).visible)
                                {
                                    if (!Layer(hostComponent.legendCollection[i].layer).isInScaleRange)
                                    {
                                        if (hostComponent.respectCurrentMapScale)
                                        {
                                            serviceGroup.visible = serviceGroup.includeInLayout = false;
                                        }
                                        else
                                        {
                                            serviceGroup.alpha = 0.5;
                                        }
                                    }
                                    else
                                    {
                                        // if it is a dynamic map service, check if all the sublayers are in scale range
                                        if (hostComponent.legendCollection[i].layer is ArcGISDynamicMapServiceLayer)
                                        {
                                            checkServiceGroups(hostComponent.legendCollection[i]);
                                        }
                                    }
                                }
                                else
                                {
                                    serviceGroup.visible = serviceGroup.includeInLayout = false;
                                }

                                // listen for change of scale and visibility
                                Layer(hostComponent.legendCollection[i].layer).removeEventListener(LayerEvent.IS_IN_SCALE_RANGE_CHANGE, layer_isInScaleRangeChangeHandler);
                                Layer(hostComponent.legendCollection[i].layer).removeEventListener(FlexEvent.HIDE, layer_hideShowHandler);
                                Layer(hostComponent.legendCollection[i].layer).removeEventListener(FlexEvent.SHOW, layer_hideShowHandler);

                                Layer(hostComponent.legendCollection[i].layer).addEventListener(LayerEvent.IS_IN_SCALE_RANGE_CHANGE, layer_isInScaleRangeChangeHandler);
                                Layer(hostComponent.legendCollection[i].layer).addEventListener(FlexEvent.HIDE, layer_hideShowHandler);
                                Layer(hostComponent.legendCollection[i].layer).addEventListener(FlexEvent.SHOW, layer_hideShowHandler);
                                if (hostComponent.legendCollection[i].layer is ArcGISDynamicMapServiceLayer)
                                {
                                    ArcGISDynamicMapServiceLayer(hostComponent.legendCollection[i].layer).visibleLayers.removeEventListener(CollectionEvent.COLLECTION_CHANGE, visibleLayersChangeHandler);
                                    ArcGISDynamicMapServiceLayer(hostComponent.legendCollection[i].layer).visibleLayers.addEventListener(CollectionEvent.COLLECTION_CHANGE, visibleLayersChangeHandler);

                                    _visibleLayersChangeWatcher = ChangeWatcher.watch(ArcGISDynamicMapServiceLayer(hostComponent.legendCollection[i].layer), "visibleLayers", visibleLayersChange);
                                }

                                for (var j:Number = 0; j < hostComponent.legendCollection[i].layerLegendInfos.length; j++)
                                {
                                    addLegendGroup(serviceGroup, serviceLabel, hostComponent.legendCollection[i].layer, LayerLegendInfo(hostComponent.legendCollection[i].layerLegendInfos[j]));
                                }
                            }
                        }
                        invalidateDisplayList();
                        isLegendShown();
                    }
                    else
                    {
                        noLegendImage.visible = noLegendImage.includeInLayout = true;
                    }
                }

                function addLegendGroup(serviceGroup:VGroup, serviceLabel:Label, layer:Layer, currentLayerLegendInfo:LayerLegendInfo):void
                {
                    if (currentLayerLegendInfo)
                    {
                        if (currentLayerLegendInfo.layerLegendInfos && currentLayerLegendInfo.layerLegendInfos.length > 0)
                        {
                            for each (var layerLegendInfo:LayerLegendInfo in currentLayerLegendInfo.layerLegendInfos)
                            {
                                addLegendGroup(serviceGroup, serviceLabel, layer, layerLegendInfo);
                            }
                        }
                        else
                        {
                            if (layer is GraphicsLayer || layer is KMLLayer)
                            {
                                serviceLabel.text = currentLayerLegendInfo.layerName;
                            }
                            else
                            {
                                var layerLabel:Label = new Label;
                                layerLabel.name = String(currentLayerLegendInfo.layerId);
                                layerLabel.text = currentLayerLegendInfo.layerName;
                                if (layer is ArcGISDynamicMapServiceLayer)
                                {
                                    if (layer.visible)
                                    {
                                        if (currentLayerLegendInfo.visible)
                                        {
                                            if (!subLayerInScaleRange(currentLayerLegendInfo))
                                            {
                                                if (hostComponent.respectCurrentMapScale)
                                                {
                                                    layerLabel.visible = layerLabel.includeInLayout = false;
                                                }
                                                else
                                                {
                                                    layerLabel.alpha = 0.5;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            layerLabel.visible = layerLabel.includeInLayout = false;
                                        }
                                    }
									
                                    else
                                    {
                                        layerLabel.visible = layerLabel.includeInLayout = false;
                                    }
                                }
                                serviceGroup.addElement(layerLabel);
                            }

                            const verticalLayout:VerticalLayout = new VerticalLayout();
                            verticalLayout.gap = 0;
                            verticalLayout.horizontalAlign = "left";
                            verticalLayout.useVirtualLayout = true;

                            var legendDataGroup:DataGroup = new DataGroup;
                            legendDataGroup.name = String(currentLayerLegendInfo.layerId);
                            legendDataGroup.layout = verticalLayout;
							var arrLegendItemInfo:ArrayCollection = new ArrayCollection;
                           //EDIT TO CATCH CLASS BREAK RENDERE ON LAYER
							if(layer is GraphicsLayer){
								if((layer as GraphicsLayer).renderer is ClassBreaksRenderer){
									//CREATE NEW OBJECT OF DATA AND PASS TO RENDERER
									for each(var r:ClassBreakInfo in ((layer as GraphicsLayer).renderer as ClassBreaksRenderer).infos)
									{
										var obj:Object = {
											"min":r.minValue,
											"max":r.maxValue,
											"symbol":r.symbol
										};
										arrLegendItemInfo.addItem(obj);
									}
									legendDataGroup.itemRenderer = new ClassFactory(ThematicLegendGroupItemRenderer);
								}
							}
							else{
	                            for (var k:Number = 0; k < currentLayerLegendInfo.legendItemInfos.length; k++)
	                            {
	                                arrLegendItemInfo.addItem(currentLayerLegendInfo.legendItemInfos[k]);
	                            }
	                          
	                            legendDataGroup.itemRenderer = new ClassFactory(LegendGroupItemRenderer);
							}
							legendDataGroup.dataProvider = arrLegendItemInfo;
							if (layer is ArcGISDynamicMapServiceLayer)
                            {
                                if (layer.visible)
                                {
                                    if (currentLayerLegendInfo.visible)
                                    {
                                        if (!subLayerInScaleRange(currentLayerLegendInfo))
                                        {
                                            if (hostComponent.respectCurrentMapScale)
                                            {
                                                legendDataGroup.visible = legendDataGroup.includeInLayout = false;
                                            }
                                            else
                                            {
                                                legendDataGroup.alpha = 0.5;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        legendDataGroup.visible = legendDataGroup.includeInLayout = false;
                                    }
                                }
                                else
                                {
                                    legendDataGroup.visible = legendDataGroup.includeInLayout = false;
                                }
                                serviceGroup.addElement(legendDataGroup);
                                checkServiceGroupVisibility(serviceGroup);
                            }
                            else
                            {
                                serviceGroup.addElement(legendDataGroup);
                            }
                        }
                    }
                }
            }

            /**
             * @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
            {
                super.updateDisplayList(unscaledWidth, unscaledHeight);

                if (vGrp)
                {
                    for (var i:Number = 0; i < vGrp.numElements; i++)
                    {
                        if (vGrp.getElementAt(i) is VGroup)
                        {
                            VGroup(vGrp.getElementAt(i)).percentWidth = 100;
                        }
                    }
                    vGrp.invalidateSize();
                }
            }

            private function checkServiceGroupVisibility(serviceGroup:VGroup):void
            {
                serviceGroup.visible = serviceGroup.includeInLayout = false;
                for (var i:int = 0; i < serviceGroup.numElements; )
                {
                    if (serviceGroup.getElementAt(i) is DataGroup && serviceGroup.getElementAt(i).visible)
                    {
                        serviceGroup.visible = serviceGroup.includeInLayout = true;
                        break;
                    }
                    else
                    {
                        i++;
                    }
                }
            }

            private function isSubLayerVisible(layerLegendInfo:LayerLegendInfo, dynamicMapServiceLayer:ArcGISDynamicMapServiceLayer):Boolean
            {
                var actualVisibleLayers:Array = getActualVisibleLayers(dynamicMapServiceLayer.visibleLayers.toArray(), dynamicMapServiceLayer.layerInfos);
                layerLegendInfo.visible = actualVisibleLayers.indexOf(Number(layerLegendInfo.layerId)) != -1 ? true : false;

                return layerLegendInfo.visible;
            }

            private function getActualVisibleLayers(layerIds:Array, layerInfos:Array):Array
            {
                var result:Array = [];

                layerIds = layerIds ? layerIds.concat() : null;
                var layerInfo:LayerInfo;
                var layerIdIndex:int;

                if (layerIds)
                {
                    // replace group layers with their sub layers
                    for each (layerInfo in layerInfos)
                    {
                        layerIdIndex = layerIds.indexOf(layerInfo.id);
                        if (layerInfo.subLayerIds && layerIdIndex != -1)
                        {
                            layerIds.splice(layerIdIndex, 1); // remove the group layer id
                            for each (var subLayerId:Number in layerInfo.subLayerIds)
                            {
                                layerIds.push(subLayerId); // add subLayerId
                            }
                        }
                    }

                    for each (layerInfo in layerInfos.reverse())
                    {
                        if (layerIds.indexOf(layerInfo.id) != -1 && layerIds.indexOf(layerInfo.parentLayerId) == -1 && layerInfo.parentLayerId != -1)
                        {
                            layerIds.push(layerInfo.parentLayerId);
                        }
                    }

                    result = layerIds;
                }

                return result;
            }

            private function subLayerInScaleRange(layerLegendInfo:LayerLegendInfo):Boolean
            {
                var result:Boolean = true;
                var map:Map = hostComponent.map;

                if (map && (layerLegendInfo.maxScale > 0 || layerLegendInfo.minScale > 0))
                {
                    var scale:Number = map.scale;
                    if (layerLegendInfo.maxScale > 0 && layerLegendInfo.minScale > 0)
                    {
                        result = layerLegendInfo.maxScale <= Math.ceil(scale) && Math.floor(scale) <= layerLegendInfo.minScale;
                    }
                    else if (layerLegendInfo.maxScale > 0)
                    {
                        result = layerLegendInfo.maxScale <= Math.ceil(scale);
                    }
                    else if (layerLegendInfo.minScale > 0)
                    {
                        result = Math.floor(scale) <= layerLegendInfo.minScale;
                    }
                }
                return result;
            }

            private function layer_isInScaleRangeChangeHandler(event:LayerEvent):void
            {
                serviceGroupShowHide(event.layer);
            }

            private function layer_hideShowHandler(event:FlexEvent):void
            {
                serviceGroupShowHide(Layer(event.target));
            }

            private function extentChangeHandler(event:ExtentEvent):void
            {
                for (var l:Number = 0; l < hostComponent.legendCollection.length; )
                {
                    if (hostComponent.legendCollection[l].layer is ArcGISDynamicMapServiceLayer && ArcGISDynamicMapServiceLayer(hostComponent.legendCollection[l].layer).isInScaleRange && ArcGISDynamicMapServiceLayer(hostComponent.legendCollection[l].layer).visible)
                    {
                        checkServiceGroups(hostComponent.legendCollection[l]);
                        break;
                    }
                    else
                    {
                        l++;
                    }
                }
                isLegendShown();
            }

            private function checkServiceGroups(legendCollectionObject:Object):void
            {
                var serviceGroups:Array = getServiceGroups(legendCollectionObject.layer);
                var count:int = 0;

                // find all the leaf layerLegendInfo
                var arrLeafLayerLegendInfo:Array = [];
                if (legendCollectionObject.layerLegendInfos && legendCollectionObject.layerLegendInfos.length > 0)
                {
                    for (var j:Number = 0; j < legendCollectionObject.layerLegendInfos.length; j++)
                    {
                        findLeafLayerLegendInfo(LayerLegendInfo(legendCollectionObject.layerLegendInfos[j]), arrLeafLayerLegendInfo);
                    }
                }

                for each (var leafLayerLegendInfo:LayerLegendInfo in arrLeafLayerLegendInfo)
                {
                    showHideLayers(subLayerInScaleRange(leafLayerLegendInfo), serviceGroups, legendCollectionObject.layer, leafLayerLegendInfo, arrLeafLayerLegendInfo.length);
                }

                function showHideLayers(isInScaleRange:Boolean, serviceGroups:Array, layer:Layer, leafLayerLegendInfo:LayerLegendInfo, numLeaf:Number):void
                {
                    var i:int;
                    if (!isInScaleRange)
                    {
                        count++;
                    }
                    if (count == numLeaf) // all the layers with legends are out of scale range
                    {
                        for (i = 0; i < serviceGroups.length; i++)
                        {
                            if (hostComponent.respectCurrentMapScale)
                            {
                                serviceGroups[i].includeInLayout = serviceGroups[i].visible = false;
                            }
                            else
                            {
                                serviceGroups[i].alpha = isInScaleRange ? 1 : 0.5;
                            }
                        }
                    }
                    else
                    {
                        for (i = 0; i < serviceGroups.length; i++)
                        {
                            if (hostComponent.respectCurrentMapScale)
                            {
                                serviceGroups[i].visible = serviceGroups[i].includeInLayout = true;
                            }
                            else
                            {
                                serviceGroups[i].alpha = 1;
                            }
                            for (var e:int = 0; e < serviceGroups[i].numElements; e++)
                            {
                                if (serviceGroups[i].getElementAt(e) is Label && Label(serviceGroups[i].getElementAt(e)).name == String(leafLayerLegendInfo.layerId))
                                {
                                    if (leafLayerLegendInfo.visible)
                                    {
                                        Label(serviceGroups[i].getElementAt(e)).visible = Label(serviceGroups[i].getElementAt(e)).includeInLayout = true;
                                        if (hostComponent.respectCurrentMapScale)
                                        {
                                            Label(serviceGroups[i].getElementAt(e)).visible = Label(serviceGroups[i].getElementAt(e)).includeInLayout = isInScaleRange;
                                        }
                                        else
                                        {
                                            Label(serviceGroups[i].getElementAt(e)).alpha = isInScaleRange ? 1 : 0.5;
                                        }
                                    }
                                    else
                                    {
                                        Label(serviceGroups[i].getElementAt(e)).visible = Label(serviceGroups[i].getElementAt(e)).includeInLayout = false;
                                    }
                                }

                                if (serviceGroups[i].getElementAt(e) is DataGroup && DataGroup(serviceGroups[i].getElementAt(e)).name == String(leafLayerLegendInfo.layerId))
                                {
                                    if (leafLayerLegendInfo.visible)
                                    {
                                        DataGroup(serviceGroups[i].getElementAt(e)).visible = DataGroup(serviceGroups[i].getElementAt(e)).includeInLayout = true;
                                        if (hostComponent.respectCurrentMapScale)
                                        {
                                            DataGroup(serviceGroups[i].getElementAt(e)).visible = DataGroup(serviceGroups[i].getElementAt(e)).includeInLayout = isInScaleRange;
                                        }
                                        else
                                        {
                                            DataGroup(serviceGroups[i].getElementAt(e)).alpha = isInScaleRange ? 1 : 0.5;
                                        }
                                    }
                                    else
                                    {
                                        DataGroup(serviceGroups[i].getElementAt(e)).visible = DataGroup(serviceGroups[i].getElementAt(e)).includeInLayout = false;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            private function visibleLayersChange(event:Event = null):void
            {
                if (ArcGISDynamicMapServiceLayer(event.target).visible)
                {
                    visibleLayersChanged(ArcGISDynamicMapServiceLayer(event.target));
                }
            }

            private function visibleLayersChangeHandler(event:CollectionEvent):void
            {
                const mapLayers:ArrayCollection = ArrayCollection(hostComponent.map.layers);
                for (var i:int = 0; i < mapLayers.length; )
                {
                    if (mapLayers.getItemAt(i) is ArcGISDynamicMapServiceLayer &&
                        ArcGISDynamicMapServiceLayer(mapLayers.getItemAt(i)).visible &&
                        ArcGISDynamicMapServiceLayer(mapLayers.getItemAt(i)).visibleLayers === event.target)
                    {
                        visibleLayersChanged(ArcGISDynamicMapServiceLayer(mapLayers.getItemAt(i)));
                        break;
                    }
                    else
                    {
                        i++;
                    }
                }
            }

            private function visibleLayersChanged(layer:ArcGISDynamicMapServiceLayer):void
            {
                for (var l:Number = 0; l < hostComponent.legendCollection.length; )
                {
                    if (hostComponent.legendCollection[l].layer is ArcGISDynamicMapServiceLayer && ArcGISDynamicMapServiceLayer(hostComponent.legendCollection[l].layer).visibleLayers === layer.visibleLayers)
                    {
                        var serviceGroups:Array = getServiceGroups(hostComponent.legendCollection[l].layer);
                        var count:int = 0;

                        // find all the leaf layerLegendInfo
                        var arrLeafLayerLegendInfo:Array = [];
                        for (var j:Number = 0; j < hostComponent.legendCollection[l].layerLegendInfos.length; j++)
                        {
                            findLeafLayerLegendInfo(LayerLegendInfo(hostComponent.legendCollection[l].layerLegendInfos[j]), arrLeafLayerLegendInfo);
                        }

                        for each (var leafLayerLegendInfo:LayerLegendInfo in arrLeafLayerLegendInfo)
                        {
                            showHideLayers(isSubLayerVisible(leafLayerLegendInfo, ArcGISDynamicMapServiceLayer(hostComponent.legendCollection[l].layer)), serviceGroups, hostComponent.legendCollection[l].layer, leafLayerLegendInfo, arrLeafLayerLegendInfo.length);
                        }

                        break;
                    }
                    else
                    {
                        l++;
                    }
                }

                function showHideLayers(isSubLayerVisible:Boolean, serviceGroups:Array, layer:Layer, leafLayerLegendInfo:LayerLegendInfo, numLeaf:Number):void
                {
                    var i:int;
                    if (!isSubLayerVisible)
                    {
                        count++;
                    }
                    if (count == numLeaf) // all the layers with legends are not visible
                    {
                        for (i = 0; i < serviceGroups.length; i++)
                        {
                            serviceGroups[i].includeInLayout = serviceGroups[i].visible = false;
                        }
                    }
                    else
                    {
                        for (i = 0; i < serviceGroups.length; i++)
                        {
                            serviceGroups[i].visible = serviceGroups[i].includeInLayout = true;
                            for (var e:int = 0; e < serviceGroups[i].numElements; e++)
                            {
                                if (serviceGroups[i].getElementAt(e) is Label && Label(serviceGroups[i].getElementAt(e)).name == String(leafLayerLegendInfo.layerId))
                                {
                                    if (isSubLayerVisible)
                                    {
                                        Label(serviceGroups[i].getElementAt(e)).visible = Label(serviceGroups[i].getElementAt(e)).includeInLayout = true;
                                        if (!subLayerInScaleRange(leafLayerLegendInfo))
                                        {
                                            if (hostComponent.respectCurrentMapScale)
                                            {
                                                Label(serviceGroups[i].getElementAt(e)).visible = Label(serviceGroups[i].getElementAt(e)).includeInLayout = false;
                                            }
                                            else
                                            {
                                                Label(serviceGroups[i].getElementAt(e)).alpha = 0.5;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        Label(serviceGroups[i].getElementAt(e)).visible = Label(serviceGroups[i].getElementAt(e)).includeInLayout = false;
                                    }
                                }

                                if (serviceGroups[i].getElementAt(e) is DataGroup && DataGroup(serviceGroups[i].getElementAt(e)).name == String(leafLayerLegendInfo.layerId))
                                {
                                    if (isSubLayerVisible)
                                    {
                                        DataGroup(serviceGroups[i].getElementAt(e)).visible = DataGroup(serviceGroups[i].getElementAt(e)).includeInLayout = true;
                                        if (!subLayerInScaleRange(leafLayerLegendInfo))
                                        {
                                            if (hostComponent.respectCurrentMapScale)
                                            {
                                                DataGroup(serviceGroups[i].getElementAt(e)).visible = DataGroup(serviceGroups[i].getElementAt(e)).includeInLayout = false;
                                            }
                                            else
                                            {
                                                DataGroup(serviceGroups[i].getElementAt(e)).alpha = 0.5;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        DataGroup(serviceGroups[i].getElementAt(e)).visible = DataGroup(serviceGroups[i].getElementAt(e)).includeInLayout = false;
                                    }
                                }
                            }
                        }
                    }
                }
                isLegendShown();
            }

            private function serviceGroupShowHide(layer:Layer):void
            {
                var serviceGroups:Array = getServiceGroups(layer);
                var i:int;
                if (layer.visible)
                {
                    for (i = 0; i < serviceGroups.length; i++)
                    {
                        serviceGroups[i].visible = serviceGroups[i].includeInLayout = true;
                        serviceGroups[i].alpha = 1;
                        if (!layer.isInScaleRange)
                        {
                            if (hostComponent.respectCurrentMapScale)
                            {
                                serviceGroups[i].visible = serviceGroups[i].includeInLayout = false;
                            }
                            else
                            {
                                serviceGroups[i].alpha = 0.5;
                            }
                        }
                    }
                }
                else
                {
                    for (i = 0; i < serviceGroups.length; i++)
                    {
                        serviceGroups[i].visible = serviceGroups[i].includeInLayout = false;
                    }
                }
                isLegendShown();
            }

            private function getServiceGroups(layer:Layer):Array
            {
                var arrServiceGroups:Array = [];
                for (var g:int = 0; g < vGrp.numElements; g++)
                {
                    if (vGrp.getElementAt(g) is VGroup && VGroup(vGrp.getElementAt(g)).name == layer.id)
                    {
                        arrServiceGroups.push(VGroup(vGrp.getElementAt(g)));
                    }
                }
                return arrServiceGroups;
            }

            private function findLeafLayerLegendInfo(currentLayerLegendInfo:LayerLegendInfo, arrLeafLayerLegendInfo:Array):void
            {
                if (currentLayerLegendInfo)
                {
                    if (currentLayerLegendInfo.layerLegendInfos && currentLayerLegendInfo.layerLegendInfos.length > 0)
                    {
                        for each (var layerLegendInfo:LayerLegendInfo in currentLayerLegendInfo.layerLegendInfos)
                        {
                            findLeafLayerLegendInfo(layerLegendInfo, arrLeafLayerLegendInfo);
                        }
                    }
                    else
                    {
                        arrLeafLayerLegendInfo.push(currentLayerLegendInfo);
                    }
                }
            }

            private function isLegendShown():void
            {
                noLegendImage.visible = noLegendImage.includeInLayout = false;

                var nothingIsShown:Boolean = true;
                for (var g:int = 0; g < vGrp.numElements; )
                {
                    if (vGrp.getElementAt(g) is VGroup && VGroup(vGrp.getElementAt(g)).visible)
                    {
                        nothingIsShown = false;
                        break;
                    }
                    else
                    {
                        g++;
                    }
                }
                if (nothingIsShown)
                {
                    noLegendImage.visible = noLegendImage.includeInLayout = true;
                }
            }
			
			protected function removeLayer_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				for each (var lyr:Layer in hostComponent.layers){
					lyr.visible = false;
				}
			}
			
		]]>
    </fx:Script>

    <s:Scroller width="100%" height="100%"
                enabled.disabled="true"
                enabled.normal="true"
                focusEnabled="false"
                hasFocusableChildren="true"
                horizontalScrollPolicy="auto"
                verticalScrollPolicy="auto">
        <!--- @private -->
        <s:VGroup width="100%" height="100%">
            <s:HGroup width="100%"
                      includeIn="loading"
                      verticalAlign="middle">
                <mx:SWFLoader source="{loader}"/>
                <s:Label width="100%" text="{resourceManager.getString('ESRIMessages', 'loadingLabel')}"/>
            </s:HGroup>
            <s:VGroup id="vGrp" paddingTop="30"
                      excludeFrom="loading"
                      paddingLeft="5">
                <s:BitmapImage id="noLegendImage"
                               includeInLayout="false"
                               source="@Embed('assets/images/nolayers.png')"
                               visible="false"/>
				
            </s:VGroup>
			<s:Button id="removeLayer" label="Remove Layer" click="removeLayer_clickHandler(event)" />
        </s:VGroup>
    </s:Scroller>
</s:SparkSkin>
