<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright Â© 2008 - 2009 ESRI
//
// All rights reserved under the copyright laws of the United States.
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// <install location>/FlexViewer/License.txt
//
// By Abdul Mannan Mohammed (abdulmannan@mis.com.sa)
//
// Modified by Wesley Chow (2010
// Added lines and points functionality
//
// Change Log
// WC 7.21.2010 - msgBox type:label -> textarea for scrolling, no text clearing
//              - clear image disabled until shapefile uploaded
//				- added mapppoint and polyline shapefile functionality
//	  7.22.2010 - added labels to graphics with first text attribute
//				- customizable display UI
//
//	Ported to SFV 2.1 coomsie (Iain Campion)
//
////////////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:esri="http://www.esri.com/2008/ags"
				   xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:mxeffects="com.adobe.ac.mxeffects.*"
				   xmlns:viewer="com.esri.viewer.*"
				   widgetConfigLoaded="init()"
				   x="600"
				   y="300">
	
	<viewer:states>
		<s:State name="StateLoad" />
		<s:State name="StateColors" />
	</viewer:states>
	<viewer:transitions>
		<s:Transition toState="*" autoReverse="true">
			<s:Fade targets="{[StateLoad,StateColors]}" />
		</s:Transition>
	</viewer:transitions>
	
	<fx:Script>
		<![CDATA[
			
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.GeometryServiceEvent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.Graphic;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.Layer;
			import com.esri.ags.Map;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.symbols.SimpleMarkerSymbol;
			import com.esri.ags.symbols.TextSymbol;
			import flash.text.TextFormat;
			import com.esri.ags.tools.DrawTool;
			import com.esri.viewer.ViewerContainer;
			import mx.collections.*;
			import mx.controls.Alert;
			import mx.rpc.AsyncResponder; 
			import mx.rpc.events.ResultEvent;			
			
			//
			import mx.collections.ArrayCollection;
			//import com.esri.ags.Graphic;
			import mx.utils.StringUtil;
			import org.vanrijkom.dbf.DbfTools;
			import org.vanrijkom.dbf.DbfRecord;
			import widgets.ShapeFiles.ShpPolygon;
			import widgets.ShapeFiles.ShpLine;
			import widgets.ShapeFiles.ShpPoint;
			import org.vanrijkom.dbf.DbfHeader;
			import org.vanrijkom.dbf.DbfField;
			import widgets.ShapeFiles.ShpReader;
			import widgets.ShapeFiles.ShpHeader;
			import widgets.ShapeFiles.nochump.util.zip.ZipEntry;
			import widgets.ShapeFiles.nochump.util.zip.ZipFile; 
			
			
			private var m_fileReference:FileReference;
			
			private var repPattern:RegExp = / /g;
			
			/* WC 7.22.2010 - graphiclayer graphics array */
			private var array:Array = [];
			
			//private var graphicsLayer:GraphicsLayer;
			
			private const ICON_URL:String = "widgets/ShapeFiles/assets/images/";
			
			private const TEXT_MODE:String = "text";
			
			private function init():void
			{
				wTemplate.addTitlebarButton(ICON_URL + "i_bookmark_add.png", "Load Shapefile", showStateLoad);
				wTemplate.addTitlebarButton(ICON_URL + "i_tools.png", "Display Preferences", showStateColors);		
			}			
			
			public function loadShapefile_clickHandler():void
			{
				m_fileReference = new FileReference();
				m_fileReference.addEventListener(Event.SELECT, selectHandler);
				m_fileReference.addEventListener(Event.CANCEL, cancelHandler);
				m_fileReference.browse([new FileFilter("Zip Files", "*.zip")]);
				
			}
			
			private function selectHandler(event:Event):void
			{
				m_fileReference.addEventListener(Event.COMPLETE, completeHandler);
				m_fileReference.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
				m_fileReference.load();
				
			}
			
			private function completeHandler(event:Event):void
			{
				var shpByteArray:ByteArray;
				var dbfByteArray:ByteArray;
				
				const zipFile:ZipFile =  new ZipFile(m_fileReference.data);                
				for each (var entry:ZipEntry in zipFile.entries)
				{
					const name:String = entry.name.toLowerCase();
					// trace( name );
					if (name.indexOf("__macosx") > -1)
					{
						continue;
					}
					if (name.indexOf(".shp") === name.length - 4)
					{
						shpByteArray = zipFile.getInput(entry);
					}
					if (name.indexOf(".dbf") === name.length - 4)
					{
						dbfByteArray = zipFile.getInput(entry);
					}
				}
				if (shpByteArray && shpByteArray.length > 0 && dbfByteArray && dbfByteArray.length > 0)
				{
					loadShapefile(shpByteArray, dbfByteArray);
				}
				m_fileReference = null;
			}
			
			private function loadShapefile(shpByteArray:ByteArray, dbfByteArray:ByteArray):void
			{
				var index:int = 0;
				const shpReader:ShpReader = new ShpReader(shpByteArray);
				const dbfHeader:DbfHeader = new DbfHeader(dbfByteArray);
				/* WC 7.21.2010 - get shapefile type */
				var shapeType:int = shpReader.readShpType();
				while (shpReader.hasMore()) {
					if (shapeType == 1) {
						/* WC 7.21.2010 - shapefile type = mappoint */
						var shpPoint:ShpPoint = shpReader.readShpPoint();
						var dbfRecord:DbfRecord = DbfTools.getRecord(dbfByteArray, dbfHeader, index++);
						/* WC 7.22.2010 - setup label with first text field attribute */
						var txtSym:TextSymbol = new TextSymbol;
						txtSym.placement = "start";
						var fldIdx:int;
						var doneFlag:Boolean = false;
						for (fldIdx = 0; fldIdx < dbfHeader.fields.length; fldIdx++) {
							if (doneFlag == false && dbfHeader.fields[fldIdx].type == 67) {
								txtSym.text = StringUtil.trim(dbfRecord.values[dbfHeader.fields[fldIdx].name]);
								doneFlag = true;
							}
						}
						txtSym.xoffset = 3;
						var fBold:Boolean = bBold.selected;
						var fItalic:Boolean = bIta.selected;
						var fUnder:Boolean = bUnd.selected;
						txtSym.textFormat = new TextFormat("Verdana",sizeFont.value,cpFont.selectedColor,fBold,fItalic,fUnder);
						array.push(new Graphic(shpPoint.toPoint(), new SimpleMarkerSymbol(styleMark.text.replace(repPattern,"").toLowerCase(),sizeMark.value,cpMark.selectedColor,alphaMark.value/100), dbfRecord.values));
						array.push(new Graphic(shpPoint.toPoint(), txtSym, dbfRecord.values));
					} else if (shapeType == 3) {
						/* WC 7.21.2010 - shapefile type = polyline */
						var shpLine:ShpLine = shpReader.readShpLine();
						var dbfRecord:DbfRecord = DbfTools.getRecord(dbfByteArray, dbfHeader, index++);
						/* WC 7.22.2010 - setup label with first text field attribute */
						var txtSym:TextSymbol = new TextSymbol;
						txtSym.placement = "start";
						var doneFlag:Boolean = false;
						for (fldIdx = 0; fldIdx < dbfHeader.fields.length; fldIdx++) {
							if (doneFlag == false && dbfHeader.fields[fldIdx].type == 67) {
								txtSym.text = StringUtil.trim(dbfRecord.values[dbfHeader.fields[fldIdx].name]);
								doneFlag = true;
							}
						}
						var fBold:Boolean = bBold.selected;
						var fItalic:Boolean = bIta.selected;
						var fUnder:Boolean = bUnd.selected;
						txtSym.textFormat = new TextFormat("Verdana",sizeFont.value,cpFont.selectedColor,fBold,fItalic,fUnder);
						array.push(new Graphic(shpLine.toLine(), new SimpleLineSymbol(styleLine.text.replace(repPattern,"").toLowerCase(),cpLine.selectedColor,alphaLine.value/100,sizeLine.value), dbfRecord.values));
						array.push(new Graphic(new MapPoint(shpLine.extent.xmax, shpLine.extent.ymax), txtSym, dbfRecord.values));
					} else if (shapeType == 5) {
						/* WC 7.21.2010 - shapefile = polygon */
						var shpPolygon:ShpPolygon = shpReader.readShpPolygon();
						var dbfRecord:DbfRecord = DbfTools.getRecord(dbfByteArray, dbfHeader, index++);
						/* WC 7.22.2010 - setup label with first text field attribute */
						var txtSym:TextSymbol = new TextSymbol;
						txtSym.placement = "start";
						var doneFlag:Boolean = false;
						for (fldIdx = 0; fldIdx < dbfHeader.fields.length; fldIdx++) {
							if (doneFlag == false && dbfHeader.fields[fldIdx].type == 67) {
								txtSym.text = StringUtil.trim(dbfRecord.values[dbfHeader.fields[fldIdx].name]);
								doneFlag = true;
							}
						}
						var fBold:Boolean = bBold.selected;
						var fItalic:Boolean = bIta.selected;
						var fUnder:Boolean = bUnd.selected;
						txtSym.textFormat = new TextFormat("Verdana",sizeFont.value,cpFont.selectedColor,fBold,fItalic,fUnder);
						array.push(new Graphic(shpPolygon.toPolygon(), new SimpleFillSymbol(styleFill.text.replace(repPattern,"").toLowerCase(),cpFill.selectedColor,alphaFill.value/100,new SimpleLineSymbol(styleLine.text.replace(repPattern,"").toLowerCase(),cpLine.selectedColor,alphaLine.value/100,sizeLine.value)), dbfRecord.values));
						array.push(new Graphic(shpPolygon.extent.center, txtSym, dbfRecord.values));
					}
				}
				graphicsLayer.graphicProvider = new ArrayCollection(array);
				map.addLayer(graphicsLayer);
				map.extent = shpReader.extent.expand(1.5);
				/* WC 7.21.2010 - "=" -> "+=", add text, do not clear msgBox.text, reference ZIP filename, make clear image visible */
				msgBox.text += "\nThe shapefile " + m_fileReference.name + " has been uploaded successfully.";
				imgClear.visible=true;
			}
			
			private function ioErrorHandler(event:IOErrorEvent):void
			{
				m_fileReference = null;
			}
			
			private function cancelHandler(event:Event):void
			{
				m_fileReference = null;
			}
			
			private function clear():void
			{
				graphicsLayer.clear();
				array = [];
				/* WC 7.21.2010 - "=" -> "+=", add text, do not clear msgBox.text, hide clear image */
				msgBox.text = "No shapefiles loaded. To load a shapefile, click the button below to upload a shapefile from your computer. Display preferences can also be edited by clicking on the tools icon above.";
				imgClear.visible=false;
			}
			
			private function widgetClosedHandler(event:Event):void
			{
				graphicsLayer.visible = false;
				setMapNavigation(null, null);
			}
			
			private function widgetOpenedHandler(event:Event):void
			{	
				
				graphicsLayer.visible = true;
			}
			
			private function showStateLoad():void
			{
				if (this.currentState != "StateLoad")
				{
					this.currentState = "StateLoad";
				}
				//WidgetEffects.flipWidget(this, viewStack, "selectedIndex", 0, 400);
			}
			
			private function showStateColors():void
			{
				if (this.currentState != "StateColors")
				{
					this.currentState = "StateColors";
				}
				//WidgetEffects.flipWidget(this, viewStack, "selectedIndex", 1, 400);
			}
			
		]]>
	</fx:Script>	
	<fx:Declarations>
	<esri:GraphicsLayer id="graphicsLayer"/>
	</fx:Declarations>
		<viewer:WidgetTemplate id="wTemplate"
							   closed="widgetClosedHandler(event)"
							   height="300"
							   open="widgetOpenedHandler(event)"
							   width="400">
			<mx:VBox id="StateLoad" width="100%" height="100%" visible.StateLoad="true" visible="false">				
				<!-- WC 7.21.2010 - msgBox type: label -> textarea -->
				<mx:TextArea id="msgBox" text="No shapefiles loaded. To load a shapefile, click the button below to upload a shapefile from your computer. Display preferences can also be edited by clicking on the tools icon above." editable="false" width="100%" height="100%"  valueCommit="msgBox.verticalScrollPosition=msgBox.maxVerticalScrollPosition"/>
				<mx:ControlBar>
					<mx:Button label="Load Local Shapefile..." click="loadShapefile_clickHandler()"/>
					<!-- WC 7.21.2010 - visible="false" -->
					<mx:Image id="imgClear" click="clear()" source="assets/images/i_clear.png" useHandCursor="true" buttonMode="true" toolTip="Clear Shapefiles" width="40" height="40" visible="false"/>
				</mx:ControlBar>
			</mx:VBox>
			<mx:VBox id="StateColors"  width="100%" height="100%" visible.StateColors="true" visible="false">
				<mx:HBox width="100%" height="100%">
					<mx:VBox height="100%" verticalAlign="middle">
						<mx:HBox width="100%" height="100%">
							<mx:Label text="Marker Color:" fontWeight="bold"/>
							<mx:ColorPicker id="cpMark"/>
							<mx:Label text="Marker Style:" fontWeight="bold"/>
							<mx:ComboBox id="styleMark">
								<fx:Array>
									<fx:String>Circle</fx:String>
									<fx:String>Cross</fx:String>
									<fx:String>Diamond</fx:String>
									<fx:String>Square</fx:String>
									<fx:String>Triangle</fx:String>
									<fx:String>X</fx:String>
								</fx:Array>
							</mx:ComboBox>
						</mx:HBox>
						<mx:HBox width="100%" height="100%">
							<mx:Label text="Marker Size:" fontWeight="bold"/>
							<mx:NumericStepper id="sizeMark" minimum="0" maximum="50" value="10"/>
							<mx:Label text="Marker Alpha:" fontWeight="bold"/>
							<mx:NumericStepper id="alphaMark" minimum="0" maximum="100" value="100"/>
						</mx:HBox>
						<mx:HRule width="100%"/>
						<mx:HBox width="100%" height="100%">
							<mx:Label text="Line Color:" fontWeight="bold"/>
							<mx:ColorPicker id="cpLine"/>
							<mx:Label text="Line Style:" fontWeight="bold"/>
							<mx:ComboBox id="styleLine">
								<fx:Array>
									<fx:String>Solid</fx:String>
									<fx:String>Dash</fx:String>
									<fx:String>Dot</fx:String>
									<fx:String>Dash Dot</fx:String>
									<fx:String>Dash Dot Dot</fx:String>
								</fx:Array>
							</mx:ComboBox>
						</mx:HBox>
						<mx:HBox width="100%" height="100%">
							<mx:Label text="Line Size:" fontWeight="bold"/>
							<mx:NumericStepper id="sizeLine" minimum="0" maximum="50" value="2"/>
							<mx:Label text="Line Alpha:" fontWeight="bold"/>
							<mx:NumericStepper id="alphaLine" minimum="0" maximum="100" value="100"/>
						</mx:HBox>
						<mx:HRule width="100%"/>
						<mx:HBox width="100%" height="100%">
							<mx:Label text="Fill Color:" fontWeight="bold"/>
							<mx:ColorPicker id="cpFill"/>
							<mx:Label text="Fill Style:" fontWeight="bold"/>
							<mx:ComboBox id="styleFill">
								<fx:Array>
									<fx:String>Solid</fx:String>
									<fx:String>Backward Diagonal</fx:String>
									<fx:String>Cross</fx:String>
									<fx:String>Forward Diagonal</fx:String>
									<fx:String>Horizontal</fx:String>
									<fx:String>Vertical</fx:String>
								</fx:Array>
							</mx:ComboBox>
						</mx:HBox>
						<mx:HBox width="100%" height="100%">
							<mx:Label text="Fill Alpha:" fontWeight="bold"/>
							<mx:NumericStepper id="alphaFill" minimum="0" maximum="100" value="15"/>
						</mx:HBox>
						<mx:HRule width="100%"/>
						<mx:HBox width="100%" height="100%">
							<mx:Label text="Font Color:" fontWeight="bold"/>
							<mx:ColorPicker id="cpFont"/>
							<mx:Label text="Font Size:" fontWeight="bold"/>
							<mx:NumericStepper id="sizeFont" minimum="0" maximum="50" value="16"/>
							<mx:Button id="bBold" label="" width="18" height="18" toggle="true" icon="@Embed(source='widgets/ShapeFiles/assets/images/i_font_bold.png')" toolTip="Bold" cornerRadius="0" selected="true"/>
							<mx:Button id="bIta" label="" width="18" height="18" toggle="true" icon="@Embed(source='widgets/ShapeFiles/assets/images/i_font_italic.png')" toolTip="Italicize" cornerRadius="0"/>
							<mx:Button id="bUnd" label="" width="18" height="18" toggle="true" icon="@Embed(source='widgets/ShapeFiles/assets/images/i_font_underline.png')" cornerRadius="0" toolTip="Underline"/>
						</mx:HBox>
					</mx:VBox>
				</mx:HBox>
				
			</mx:VBox>
		</viewer:WidgetTemplate>
</viewer:BaseWidget>