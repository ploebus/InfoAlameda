<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="init(event)">
	
	<!--
	Dispatches events:
	SelectionFeatureLayerEvent.REMOVE_GRAPHIC_LISTENER
	SelectionFeatureLayerEvent.ADD_GRAPHIC_LISTENER
	SelectionOptionsEvent."selectionMethodChange"
	
	Listens for events:
	SelectionFeatureLayerEvent.LAYER_RESULTS
	"alllayersadded"
	-->
	
	<s:layout>
		<s:VerticalLayout paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10"/>
	</s:layout>
	
	<fx:Metadata>
		[Event(name="selectionMethodChange", type="widgets.Selection.events.SelectionOptionsEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.events.GraphicEvent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.layers.FeatureLayer;
			import com.esri.ags.tasks.supportClasses.Query;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.rpc.AsyncResponder;
			
			import widgets.Selection.events.SelectionFeatureLayerEvent;
			import widgets.Selection.utils.SelectionWidgetUtil;
			
			[Bindable] public var selectionLayers:Array = [];
			[Bindable] public var selectionMethod:String;
			[Bindable] private var numSelectedFeatures:int=0;
			
			[Bindable]public var spatialRelationshipOptions_linear:ArrayCollection = new ArrayCollection(
				[
					{ data: Query.SPATIAL_REL_CROSSES, label: "whose borders crosses my line" },
					{ data: Query.SPATIAL_REL_INTERSECTS, label: "that my line intersects" },
					{ data: Query.SPATIAL_REL_WITHIN, label: "that contain my complete line" }
				]);
			
			[Bindable]public var spatialRelationshipOptions_area:ArrayCollection = new ArrayCollection(
				[
					{ data: Query.SPATIAL_REL_INTERSECTS, label: "that are partially or completely within" },
					{ data: Query.SPATIAL_REL_CONTAINS, label: "that are completely within" },
					{ data: Query.SPATIAL_REL_OVERLAPS, label: "that are partially (but not fully) within" },
					{ data: Query.SPATIAL_REL_WITHIN, label: "that are is (fully) inside" }
				]);
			
			protected function init(event:FlexEvent):void
			{
				//need to listen for when layers selections change 
				systemManager.addEventListener(SelectionFeatureLayerEvent.LAYER_RESULTS,featureLayer_resultsHandler);
				systemManager.addEventListener("alllayersadded",allLayersAddedHandler);
			}
			
			private function allLayersAddedHandler(event:Event):void
			{
				layersList.selectedIndex = 0;
				//var selIndices:Array = [];
				//selIndices.push(0);
				sellayersList.selectedIndices = [0];
				
				sellayersList.invalidateList();
			}
			
			private function featureLayer_resultsHandler(event:SelectionFeatureLayerEvent):void
			{
				trace("featureLayer_resultsHandler location");
				layersList.invalidateDisplayList();
				sellayersList.invalidateList();
				layersList.selectedIndex = layersList.selectedIndex;
				numSelectedFeatures = event.featureLayer.selectedFeatures.length;
			}
			
			private function layersLabelFunc(item:Object):String 
			{
				var fl:FeatureLayer = item.layer as FeatureLayer;
				if (fl)
				{
					return fl.name + " (" + fl.selectedFeatures.length + ")";
				}
				else 
				{
					return null;
				}
			}
			
			protected function layersList_changeHandler(event:ListEvent):void
			{
				var i:int = layersList.selectedIndex;
				var fl:FeatureLayer = selectionLayers[i].layer;
				numSelectedFeatures = fl.selectedFeatures.length;
			}
			
			protected function selectBtn_clickHandler(event:MouseEvent):void
			{
				this.cursorManager.setBusyCursor();
				
				var i:int = layersList.selectedIndex;
				var targetLayer:FeatureLayer = selectionLayers[i].layer;
				
				var selItems:Array = sellayersList.selectedItems;
				var numItems:Number = sellayersList.selectedIndices.length;
				
				for (var ii:Number = 0; ii<numItems; ii++)
				{
					var selLayer:FeatureLayer = selItems[ii].layer;
					
					if (targetLayer.selectedFeatures.length > 1)
					{
						//union geometries
						var fs:FeatureSet = new FeatureSet(targetLayer.selectedFeatures);
						var unionGeom:Geometry = SelectionWidgetUtil.unionGeoms(fs);
						doQuery(selLayer, unionGeom);
					}
						
					else if (targetLayer.selectedFeatures.length == 1)
					{
						//query the layer(s)
						var geom:Geometry;
						geom = targetLayer.selectedFeatures[0].geometry;
						doQuery(selLayer, geom);
					}
					else
					{
						dispatchEvent(new SelectionFeatureLayerEvent(SelectionFeatureLayerEvent.REMOVE_GRAPHIC_LISTENER,
							targetLayer));
						
						//select all faetures first then union geoms
						var query:Query = new Query();
						query.where = "1=1";
						query.returnGeometry = true;
						targetLayer.selectFeatures(query, "new", new AsyncResponder(onSelectAllResult, onSelectAllFault, selLayer));
					}
				}
				
			}
			
			private function onSelectAllResult(info:Array, selLayer:FeatureLayer = null):void
			{
				var i:int = layersList.selectedIndex;
				var targetLayer:FeatureLayer = selectionLayers[i].layer;
				
				var fs:FeatureSet = new FeatureSet(targetLayer.selectedFeatures);
				var unionGeom:Geometry = SelectionWidgetUtil.unionGeoms(fs);
				doQuery(selLayer, unionGeom);
				
				targetLayer.clearSelection();
				dispatchEvent(new SelectionFeatureLayerEvent(SelectionFeatureLayerEvent.ADD_GRAPHIC_LISTENER,
					targetLayer));
			}
			
			//on fault
			private function onSelectAllFault(info:Object, token:FeatureLayer = null):void
			{
				this.cursorManager.removeBusyCursor();
				
				var i:int = layersList.selectedIndex;
				var targetLayer:FeatureLayer = selectionLayers[i].layer;
				targetLayer.clearSelection();
				
				dispatchEvent(new SelectionFeatureLayerEvent(SelectionFeatureLayerEvent.ADD_GRAPHIC_LISTENER,
					targetLayer));
				Alert.show("Could not complete Selection. Please try again.\n" + info.toString(), 
					"Selection Error", Alert.OK);
			}
			
			private function doQuery(featureLayer:FeatureLayer, geom:Geometry):void
			{
				var query:Query = new Query();
				query.spatialRelationship = spatialMethod.selectedItem.data;
				query.geometry = geom;
				query.returnGeometry = true;
				featureLayer.selectFeatures(query, selectionMethod, new AsyncResponder(onSelectResult, onSelectFault, featureLayer));
			}
			
			private function onSelectResult(info:Array, token:FeatureLayer = null):void
			{
				this.cursorManager.removeBusyCursor();
				var fl:FeatureLayer = token;
				
				SelectionWidgetUtil.zoomtoSelectedFeatures(fl);
			}
			
			//on fault
			private function onSelectFault(info:Object, token:Object = null):void
			{
				this.cursorManager.removeBusyCursor();
				Alert.show("Could not complete Selection. Please try again.\n" + info.toString(), 
					"Selection Error", Alert.OK);
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:Label text="Selection By Location..." 
			 width="300" paddingBottom="5"
			 fontSize="12" fontWeight="bold"/>
	
	<s:Label text="Choose Layer(s) to Select features from:" paddingTop="5"/>
	<mx:List id="sellayersList" 
			 width="100%" height="100%" 
			 paddingBottom="5"
			 dataProvider="{selectionLayers}"
			 labelFunction="layersLabelFunc"
			 allowMultipleSelection="true"
			 />	
	<s:Label text="Search for features that are:" paddingTop="10"/>
	<mx:ComboBox id="spatialMethod" 
				 width="100%"
				 dataProvider="{spatialRelationshipOptions_area}"/>
	
	<s:Label text="Source Layer:" paddingTop="10"/>
	<mx:ComboBox id="layersList" width="100%"
				 change="layersList_changeHandler(event)"
				 dataProvider="{selectionLayers}"
				 labelField="label"
				 labelFunction="layersLabelFunc"/>
	
	<s:Label text="Using Selected Features" visible="{numSelectedFeatures > 0}"/>
	
	<s:HGroup width="100%" paddingTop="10">
		<s:Button id="selectBtn" label="Select"
				  click="selectBtn_clickHandler(event)"/>
	</s:HGroup>
</s:Group>
