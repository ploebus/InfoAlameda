<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="init(event)">
	
	<!--
	Dispatches events:
	SelectionGraphicEvent.CLICK_GRID
	SelectionGraphicEvent.OVER_GRID
	
	Listens for events:
	SelectionFeatureLayerEvent.LAYER_RESULTS
	SelectionFeatureLayerEvent.SHOW_RESULTS
	SelectionGraphicEvent.OVER_GRAPHIC
	"alllayersadded"
	-->
	
	<s:layout>
		<s:VerticalLayout paddingLeft="10" paddingRight="10" paddingTop="10"/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.events.FeatureLayerEvent;
			import com.esri.ags.layers.FeatureLayer;
			import com.esri.ags.layers.supportClasses.Field;
			
			import mx.controls.DataGrid;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.FlexGlobals;
			import mx.core.ScrollPolicy;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import spark.components.NavigatorContent;
			import spark.events.IndexChangeEvent;
			
			import widgets.Selection.events.SelectionFeatureLayerEvent;
			import widgets.Selection.events.SelectionGraphicEvent;
			import widgets.Selection.utils.SelectionWidgetUtil;
			
			[Bindable] public var selectionLayers:Array;
			[Bindable] private var targetLayer:FeatureLayer;
			private var _configXML:XML;
			
			
			
			
			[Bindable]
			public function get configXML():XML
			{
				return _configXML;
			}

			public function set configXML(value:XML):void
			{
				_configXML = value;
				
				var backgroundColors:Array = dg.getStyle("alternatingItemColors");
				
				var resultColor1:String = configXML.datagrid.@alternatingColor1 || backgroundColors[0];
				var resultColor2:String = configXML.datagrid.@alternatingColor2 || backgroundColors[1];
				var resultBackgroundAlpha:String = configXML.datagrid.@backgroundAlpha || "0";
				var resultGridLines:String = configXML.datagrid.@horizontalGridLines || "true";
				var resultGridLineColor:String = configXML.datagrid.@horizontalGridLineColor || "0x666666";
				
				dg.setStyle("alternatingItemColors",[resultColor1,resultColor2]); 
				dg.setStyle("backgroundAlpha", resultBackgroundAlpha);
				dg.setStyle("horizontalGridLines", resultGridLines);
				dg.setStyle("horizontalGridLineColor", resultGridLineColor); 
			}

			protected function init(event:FlexEvent):void
			{
				//need to listen for when layers selections change 
				systemManager.addEventListener(SelectionFeatureLayerEvent.LAYER_RESULTS,featureLayer_resultsHandler);
				systemManager.addEventListener(SelectionFeatureLayerEvent.SHOW_RESULTS,featureLayer_resultsHandler);
				systemManager.addEventListener("alllayersadded",allLayersAddedHandler);
				systemManager.addEventListener(SelectionGraphicEvent.OVER_GRAPHIC, overGraphicHandler);
			}
			
			protected function dg_initializeHandler(event:FlexEvent):void
			{
				dg.setStyle("backgroundAlpha", "0");
				dg.setStyle("horizontalGridLines", "true");
				dg.setStyle("horizontalGridLineColor", "0x666666"); 
			}
			
			private function allLayersAddedHandler(event:Event):void
			{
				layersList.selectedIndex = 0;
				var fl:FeatureLayer = selectionLayers[0].layer;
				setDataGrid(fl);
			}
			
			private function featureLayer_resultsHandler(event:SelectionFeatureLayerEvent):void
			{
				trace("featureLayer_resultsHandler results");
				for (var i:int = 0; i< selectionLayers.length; i++)
				{
					if (selectionLayers[i].label == event.featureLayer.name)
					{
						layersList.selectedIndex = i;
						break;
					}
				}
				layersList.invalidateDisplayList();
				setDataGrid(event.featureLayer);
			}
			
			private function setDataGrid(featureLayer:FeatureLayer):void
			{
				var iTargetLayer:int;
				for (var i:int = 0; i< selectionLayers.length; i++)
				{
					if (selectionLayers[i].label == featureLayer.name)
					{
						iTargetLayer = i;
						break;
					}
				}
				
				targetLayer = selectionLayers[iTargetLayer].layer;
				
				var arrFields:Array;
				arrFields = selectionLayers[iTargetLayer].fields;
				
				var dgColumns:Array = [];
				for (var icount:int = 0; icount< arrFields.length; icount++)
				{
					var fld:Field = arrFields[icount];
					
					var dgColumn:DataGridColumn = new DataGridColumn();
					dgColumn.headerText = fld.alias;
					dgColumn.labelFunction = labelOf(fld.name);
					dgColumn.sortCompareFunction = sortOf(fld.name); 
					
					dgColumns.push(dgColumn);
				}
				
				dg.columns = dgColumns;
				
				var fs:FeatureSet = new FeatureSet(featureLayer.selectedFeatures);
				dg.dataProvider = fs.attributes;
			}
			
			private function labelOf(fullfieldname:String):Function {
				return 	function (item:Object, column:DataGridColumn):String { 
					return item[fullfieldname];
				};
			}
			
			private function sortOf(fullfieldname:String):Function {  
				return	function (obj1:Object, obj2:Object):int {  
					if(obj1[fullfieldname] < obj2[fullfieldname]) {  
						return -1;
					}
					else if(obj1[fullfieldname] > obj2[fullfieldname]) {
						return 1;  
					}
					else {  
						return 0;  
					} 
				};
			}
			
			private function layersLabelFunc(item:Object):String 
			{
				var fl:FeatureLayer = item.layer as FeatureLayer;
				if (fl)
				{
					return fl.name + " (" + fl.selectedFeatures.length + ")";
				}
				else 
				{
					return null;
				}
			}
			
			protected function layersList_changeHandler(event:ListEvent):void
			{
				var i:int = layersList.selectedIndex;
				var fl:FeatureLayer = selectionLayers[i].layer;
				setDataGrid(fl);
			}
			
			protected function dg_itemClickHandler(event:ListEvent):void
			{
				var e:SelectionGraphicEvent = new SelectionGraphicEvent(SelectionGraphicEvent.CLICK_GRID, 
					event.itemRenderer.data, targetLayer)
				dispatchEvent(e);
			}
			
			protected function dg_itemRollOverHandler(event:ListEvent):void
			{
				var e:SelectionGraphicEvent = new SelectionGraphicEvent(SelectionGraphicEvent.OVER_GRID, 
					event.itemRenderer.data, targetLayer)
				dispatchEvent(e);
			}
			
			private function overGraphicHandler(event:SelectionGraphicEvent):void
			{
				for (var i:int = 0; i<dg.dataProvider.length; i++)
				{
					if (dg.dataProvider[i] == event.attribute)
					{
						dg.selectedIndex = i;
						dg.scrollToIndex(i);
						break;
					}
				}
			}
			
			protected function clearBtn_clickHandler(event:MouseEvent):void
			{
				targetLayer.clearSelection();
			}
			
			
			protected function zoomBtn_clickHandler(event:MouseEvent):void
			{
				SelectionWidgetUtil.zoomtoSelectedFeatures(targetLayer);
			}
			
			
			protected function exportBtn_clickHandler(event:MouseEvent):void
			{
				var tabSeparatedValues:String = "";
				
				var iTargetLayer:int;
				for (var i:int = 0; i< selectionLayers.length; i++)
				{
					if (selectionLayers[i].label == targetLayer.name)
					{
						iTargetLayer = i;
						break;
					}
				}
				
				var arrFields:Array;
				arrFields = selectionLayers[iTargetLayer].fields;
				
				//loop through the fields and add the header
				for (var icount:int = 0; icount< arrFields.length; icount++)
				{
					var fld:Field;
					fld = arrFields[icount];
					if (icount < arrFields.length - 1)
					{
						tabSeparatedValues += fld.name + "\t";
					}
					else
					{
						tabSeparatedValues += fld.name + "\r\n";
					}
				}
				
				//loop through the datagrid and Add the content
				for (var ii:int = 0; ii < dg.dataProvider.length; ii++)
				{
					for (icount = 0; icount< arrFields.length; icount++)
					{
						var fld1:Field;
						fld1 = arrFields[icount];
						var fldName:String = fld1.name;
						
						if (icount < arrFields.length - 1)
						{
							tabSeparatedValues += dg.dataProvider[ii][fldName] + "\t";
						}
						else
						{
							tabSeparatedValues += dg.dataProvider[ii][fldName] + "\r\n";
						}
					}
				} // end for 
				
				var fileReference:FileReference = new FileReference();
				fileReference.save(tabSeparatedValues,targetLayer.name + ".txt");
			}
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:Label text="Selection Results..." 
			 width="300" paddingBottom="5"
			 fontSize="12" fontWeight="bold"/>
	
	<mx:ComboBox id="layersList" width="100%"
				 change="layersList_changeHandler(event)"
				 dataProvider="{selectionLayers}"
				 labelField="label"
				 labelFunction="layersLabelFunc"/>
	
	<mx:DataGrid id="dg" width="100%" height="100%" minWidth="150"
				 horizontalScrollPolicy="on"
				 itemClick="dg_itemClickHandler(event)"
				 itemRollOver="dg_itemRollOverHandler(event)"
				 initialize="dg_initializeHandler(event)"/>
	
	<s:HGroup verticalAlign="justify" width="300">
		<s:Button id="clearBtn"
				  label="Clear"
				  toolTip="Clear Selected Features"
				  click="clearBtn_clickHandler(event)"
				  enabled="{targetLayer.selectedFeatures.length > 0}"/>
		<s:Button id="zoomBtn"
				  label="Zoom"
				  toolTip="Zoom to Selected Features"
				  click="zoomBtn_clickHandler(event)"
				  enabled="{targetLayer.selectedFeatures.length > 0}"/>
		<s:Button id="exportBtn" 
				  label="Export"
				  toolTip="Export to tab delimited .txt file"
				  click="exportBtn_clickHandler(event)"
				  enabled="{targetLayer.selectedFeatures.length > 0}"/>
	</s:HGroup>
</s:Group>
