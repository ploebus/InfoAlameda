<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark Button component.  

       @see spark.components.Button
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
			 xmlns:degrafa="com.degrafa.*" xmlns:paint="com.degrafa.paint.*"
minWidth="21" minHeight="21"
			 width="462" height="65" contentBackgroundAlpha="0.0" chromeColor="#FCFAFA" xmlns:degrafa1="http://www.degrafa.com/2007" xmlns:decorators="com.degrafa.decorators.*" xmlns:collections="com.degrafa.core.collections.*">
    
    <!-- host component -->
    <fx:Metadata>
        <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.Button")]
        ]]>
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        <![CDATA[         
            /* Define the skin elements that should not be colorized. 
            For button, the graphics are colorized but the label is not. */
            static private const exclusions:Array = ["labelDisplay"];
            
            /** 
             * @private
             */     
            override public function get colorizeExclusions():Array {return exclusions;}
            
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }  
            
            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
                var cr:Number = getStyle("cornerRadius");
                
     
                
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
            
            private var cornerRadius:Number = 2;
        ]]>        
    </fx:Script>
    
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" />
        <s:State name="down" />
        <s:State name="disabled" />
    </s:states>
    
    <!-- layer 1: shadow -->
    <!--- @private -->
    <!-- layer 2: fill -->
    <!--- @private -->
    <!-- layer 3: fill lowlight -->
    <!--- @private -->
    <!-- layer 4: fill highlight -->
    <!--- @private -->
    <!-- layer 5: highlight stroke (all states except down) -->
	<degrafa:Surface includeIn="over">
		<degrafa:strokes>
			<paint:SolidStroke color="0x333333" alpha=".6" weight="2" id="overHighlight"/>
			
		</degrafa:strokes>
		
		<degrafa:GeometryGroup>
			<degrafa1:RegularRectangle stroke="{overHighlight}" width="100%" height="100%">
				
			</degrafa1:RegularRectangle>
		</degrafa:GeometryGroup>
	</degrafa:Surface>
    <!-- layer 6: highlight stroke (down state only) -->
    <!--- @private -->
	

    <!--- @private -->
    <!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
    <!--- @private -->
    <!-- layer 8: text -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
	<s:BitmapImage source="@Embed('/assets/images/i_globe.png')"  y="10" left="8"/>
	<s:Label id="labelDisplay"
             textAlign="center"
             maxDisplayedLines="1"
			 verticalAlign="middle" width="392" top="0" bottom="-1" right="0" horizontalCenter="35" verticalCenter="0"  horizontalCenter.down="35" >
    </s:Label>
	
    
</s:SparkSkin>
