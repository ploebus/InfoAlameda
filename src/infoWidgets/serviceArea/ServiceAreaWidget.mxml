<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright Â© 2008 - 2009 ESRI
//
// All rights reserved under the copyright laws of the United States.
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// <install location>/FlexViewer/License.txt
//
////////////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:esri			="http://www.esri.com/2008/ags"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:viewer="com.esri.viewer.*"
				  
				  
				   layout="absolute"
				   widgetConfigLoaded="init()">
	
	
<fx:Script>
	

		<![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.Map;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.GeometryServiceEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.renderers.ClassBreaksRenderer;
			import com.esri.ags.renderers.UniqueValueRenderer;
			import com.esri.ags.renderers.supportClasses.ClassBreakInfo;
			import com.esri.ags.renderers.supportClasses.UniqueValueInfo;
			import com.esri.ags.symbols.CompositeSymbol;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.symbols.SimpleMarkerSymbol;
			import com.esri.ags.symbols.Symbol;
			import com.esri.ags.tasks.supportClasses.AddressCandidate;
			import com.esri.ags.tasks.supportClasses.DataFile;
			import com.esri.ags.tasks.supportClasses.ExecuteResult;
			import com.esri.ags.tasks.supportClasses.ParameterValue;
			import com.esri.ags.tools.DrawTool;
			import com.esri.ags.utils.WebMercatorUtil;
			import com.esri.serialization.json.*;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.ViewerContainer;
			import com.esri.viewer.utils.Hashtable;
			
			import mx.collections.*;
			import mx.controls.Alert;
			import mx.graphics.GradientBase;
			import mx.rpc.AsyncResponder;
			import mx.rpc.Fault;
			import mx.rpc.events.ResultEvent;
			//labels
			[Bindable]
			private var serviceareaLabel:String;
			
			[Bindable]
			private var locationLabel:String;
			
			[Bindable]
			private var addlocationLabel:String;
			
			[Bindable]
			private var previouslocationLabel:String;
			
			[Bindable]
			private var intervalLabel:String;
			
			[Bindable]
			private var submitLabel:String;
			
			[Bindable]
			private var clearLabel:String;
			
			private var loadingLabel:String;
			
			[Bindable]
			private var msgVisible:Boolean = false;
			
			private var graphicsLayer:GraphicsLayer;
			
			private var addrFields:Array;
			
			private var locPoint:MapPoint;
			
			private var outlineSym:SimpleLineSymbol = new SimpleLineSymbol("solid", 0xFFFFFF, 1, 2);
			
			private var locSym:SimpleMarkerSymbol = new SimpleMarkerSymbol("circle", 12, 0x08C308, 1, 0,0,0,outlineSym);
			
			private var outline1:SimpleLineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,0xFF0000,1,5);
			private var outline2:SimpleLineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,0xFF7800,1,3);
			private var outline3:SimpleLineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,0xC8FF00,1,1);
			
			[Bindable]
			private var fillSym1:SimpleFillSymbol = new SimpleFillSymbol("solid", 0xFF0000, 0.5,outline1);
			[Bindable]
			private var fillSym2:SimpleFillSymbol = new SimpleFillSymbol("solid", 0xFF7800, 0.5,outline2);
			[Bindable]
			private var fillSym3:SimpleFillSymbol = new SimpleFillSymbol("solid", 0xC8FF00, 0.5,outline3);
			
			
			
	
			
			private var outlines:Array=[outline1,outline2,outline3];
			
			private var sharedwidgets:String;	
			
			[Bindable]
			private var sharedLocations:Array = [];		
									
			private const ICON_URL:String = "assets/images/icons/";
			
			private const START_POINT:String = "startPoint";
			
			private const END_POINT:String = "endPoint";
						
			private function init():void
			{
			
				AppEvent.addListener(AppEvent.DATA_UPDATED, sharedDataUpdated);
				//graphicsLayer = new GraphicsLayer();
					//var uRenderer:UniqueValueRenderer=new UniqueValueRenderer();
					//uRenderer.attribute="ToBreak";
					//var uniqueValueInfos:Array=[];
						//uniqueValueInfos.push(new UniqueValueInfo(fillSym1,"1"));
						//uniqueValueInfos.push(new UniqueValueInfo(fillSym2,"3"));
						//uniqueValueInfos.push(new UniqueValueInfo(fillSym3,"5"));
					//uRenderer.infos=uniqueValueInfos;
					//graphicsLayer.renderer = uRenderer;
				map.addLayer(gLayer);
				if (configXML)
				{
					serviceareaLabel = configXML.labels.servicearealabel || "Click point tool and select a location on the map";
					locationLabel = configXML.labels.locationlabel || "";
					addlocationLabel = configXML.labels.addlocationlabel || "Add Location";
					previouslocationLabel = configXML.labels.previouslocationlabel || "";
					intervalLabel = configXML.labels.intervallabel || "Drive Times (min):";
					submitLabel = configXML.labels.submitlabel || "Show Service Area";
					clearLabel = configXML.labels.clearlabel || "Clear";
					loadingLabel = configXML.labels.loadinglabel || "Loading...";
					
					sharedwidgets = configXML.sharedwidgets;
					var url:String = configXML.locator;
					locatorService.url = url + "?f=json";
					locator.url = url;
					locatorService.send();
					serviceAreaService.url = configXML.serviceareaservice;
				}
				this.fetchSharedData();
			}			
			
			private function onJSONLoad(event:ResultEvent):void
			{
				var rawData:String = String(event.result);
				var data:Object = JSON.decode(rawData)
				addrFields = data.addressFields;
			}	
			
			private function sharedDataUpdated(event:AppEvent):void
			{
				sharedLocations.length = 0;
				var defaultlocation:Object = 
				{
					label: "",
					point: null
				}
				sharedLocations.push(defaultlocation);
				var dataTable:Hashtable = event.data as Hashtable;
				if (sharedwidgets != "")
				{
					var keyArray:Array = sharedwidgets.split(",");
					for each (var key:String in keyArray)
					{
						if (dataTable.containsKey(key))
						{
							var recAC:ArrayCollection = dataTable.find(key) as ArrayCollection;
							for (var i:Number = 0; i < recAC.length; i++)
							{
								var obj:Object = recAC[i];
								var title:String = obj.title;
								var point:MapPoint = obj.point;
								var location:Object = 
								{
									label: title,
									point: point
								}
								sharedLocations.push(location);
							}
						}
					}
				}
				//cboPreviousLocations.dataProvider = sharedLocations;
			}
			
			private function activateTool():void
			{
				var status:String = addlocationLabel;
				setMapAction(DrawTool.MAPPOINT, status,locSym, locationClick);	
			}			
			
			private function locationClick(event:DrawEvent):void
			{
				//txtLocation.text = "";
				var geom:Geometry = event.graphic.geometry;
				var pt:MapPoint = geom as MapPoint;
				pt.spatialReference = new SpatialReference(map.spatialReference.wkid);
				locPoint = pt;
				updateGraphics();
			}			
			
			private function updateGraphics():void
			{
				gLayer.clear();
				if (locPoint)
				{
					var locGra:Graphic = new Graphic(locPoint, locSym);
					gLayer.add(locGra);
		 		}
			}			
			
			private function locateAddress(addr:String):void
			{
				var addrArray:Array = addr.split(",");
				var data:Object = new Object();
				for (var i:Number = 0; i < addrFields.length; i++)
				{
					var name:String = addrFields[i].name;
					var value:String;
					if (addrArray[i])
						value = addrArray[i];
					data[name] = value;
				}
				locator.addressToLocations(data, null, new ItemResponder(locateResult, locateError));
				showMessage(loadingLabel, true);
			}			
			
			private function locateResult(data:Array, token:Object=null):void
			{
				if (data.length > 0)
				{
					var addrCandidate:AddressCandidate =  data[0] as AddressCandidate
					var pt:MapPoint = addrCandidate.location;
					pt.spatialReference = new SpatialReference(map.spatialReference.wkid);
					locPoint = pt;
					clearMessage();
					computeServiceArea();
				}
				else
				{
					showMessage("Unable to locate address, please verify address and try again.", false);
				}
			}					
			
			private function locateError(info:Object, token:Object = null):void
			{
				showMessage(info.toString(), false);	
			}			        
        
        	private function getServiceArea():void
        	{
        		//if (txtLocation.text)
				//{
					//locateAddress(txtLocation.text);
				//}
				//else
				//{
					computeServiceArea();
				//}
        	}        	
        	
	        private function computeServiceArea():void
            {
            	if (locPoint)
            	{
            		var graphic:Graphic = new Graphic(locPoint, locSym);
	                var featureSet:FeatureSet = new FeatureSet([graphic]);	                
	                var driveTimes:String = "";
	                if (numTime1.value > 0) 
	                	driveTimes += numTime1.value.toString();
	                if (numTime2.value > 0)
	                {
	                	if(driveTimes.length)
	                		driveTimes += " ";
	                	driveTimes +=  numTime2.value.toString();
	                }
	                if (numTime3.value > 0)
	                {
	                	if(driveTimes.length)
	                		driveTimes += " ";
	                	driveTimes +=  numTime3.value.toString();
	                }
	                if (driveTimes.length)
	                {
		                var params:Object = 
		                {
		                    "Input_Location": featureSet,
		                    "Drive_Times": driveTimes
	                	};
		                serviceAreaService.execute(params, new AsyncResponder(onResult, onFault));
		                showMessage(loadingLabel, true);
	                }
	                
	                
	                function onResult(gpResult:ExecuteResult, token:Object = null):void
	                {
	                    var pv:ParameterValue = gpResult.results[0];
	                    var fs:FeatureSet = pv.value as FeatureSet;
	                    if(map.spatialReference.wkid != 4326) { 
	                    	fs = projectFS(fs);
	                    }
	                   gLayer.graphicProvider = fs.features;
	                    gLayer.add(graphic);
	                    map.extent = getFeatureSetExtent(fs);
	                    clearMessage();
	                }
	                
	                function onFault(info:Object, token:Object = null):void
	                {
	                   showMessage(info.toString(), false);
	                }
            	}
            }
            
            //reproject the output featureset
            private function projectFS(fs:FeatureSet):FeatureSet
            {            		
            	var fsOut:FeatureSet =  new FeatureSet([]);
            	var g:Graphic;
            	try{
            		for each (var gra:Graphic in fs.features)
            		{            		
            	   	    var geom:Geometry =WebMercatorUtil.geographicToWebMercator(gra.geometry);
            		 	g = new Graphic(geom,gra.symbol,gra.attributes);
            		 	fsOut.features.push(g);
            		}
            	}catch(e:Error){
            		Alert.show(e.message);
            	}
            	return fsOut;
            }
            
            private function getFeatureSetExtent(fs:FeatureSet):Extent
            {
            	var ext:Extent;
            	for each (var gra:Graphic in fs.features)
            	{
            		if (gra.geometry.type == Geometry.POLYGON)
            		{
	            		var poly:Polygon = gra.geometry as Polygon;
	            		if (ext)
	            		{ 
	            			ext = ext.union(poly.extent);
	            		}
	            		else
	            		{
	            			ext = poly.extent;
	            		}
            		}
            	}
            	return ext.expand(2);
            }            
            
               
	        
			private function clear():void
			{
				gLayer.clear();
				locPoint = null;
				clearMessage();
			}			
			
			private function showMessage(msg:String, swfVisible:Boolean):void
			{
				txtMessage.text = msg;
				swfMessage.visible = swfVisible;
				msgVisible = true;
			}			
			
			private function clearMessage():void
			{
				msgVisible = false;
			}
						
			private function widgetClosedHandler(event:Event):void
			{
				graphicsLayer.visible = false;
				setMapNavigation(null, null);
			}			
			
			private function widgetOpenedHandler(event:Event):void
			{
				graphicsLayer.visible = true;
			}	
			
			private function selectPreviousLocation():void
			{
				//txtLocation.text = "";
				//locPoint = cboPreviousLocations.selectedItem.point;
			}		
			

			protected function button1_clickHandler(event:MouseEvent):void
			{
				
				switch(event.currentTarget.label)
					{
						case "Outline":
							for each (var s:UniqueValueInfo in (gLayer.renderer as UniqueValueRenderer).infos)
							{
								//s.symbol=outlines[i];
								
								(s.symbol as SimpleFillSymbol).style=SimpleFillSymbol.STYLE_NULL;
								//var compSym:CompositeSymbol=new CompositeSymbol([fillsym,outlinesym]);
								//fillsym.outline=outlinesym;
								//s.symbol=fillsym;
								//i=i-3;
								
							}
							event.currentTarget.label="Fill";
							gLayer.refresh();
						break;
						case "Fill":
							for each (var s1:UniqueValueInfo in (gLayer.renderer as UniqueValueRenderer).infos){
							//s.symbol=outlines[i];
							
							(s1.symbol as SimpleFillSymbol).style=SimpleFillSymbol.STYLE_SOLID;
							//var compSym:CompositeSymbol=new CompositeSymbol([fillsym,outlinesym]);
							//fillsym.outline=outlinesym;
							//s.symbol=fillsym;
							//i=i-3;
							}
							event.currentTarget.label="Outline";
							gLayer.refresh();
						break;
					
					}
				}
				
				
				
		

		]]>
</fx:Script>
	<fx:Declarations> 	
	<esri:Geoprocessor		id="serviceAreaService" 
							updateDelay="3000" 
							url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Network/ESRI_DriveTime_US/GPServer/CreateDriveTimePolygons"/>
	
								
	<mx:HTTPService			id="locatorService" 
							resultFormat="text" 
							url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Locators/ESRI_Geocode_USA/GeocodeServer?f=json"	
							result="onJSONLoad(event)"/>
							
	<esri:Locator			id="locator" 
							url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Locators/ESRI_Geocode_USA/GeocodeServer" 
							showBusyCursor="true"/>
	</fx:Declarations>
	<esri:GraphicsLayer id="gLayer">
		<esri:renderer>
			<esri:UniqueValueRenderer attribute="ToBreak">
				<esri:UniqueValueInfo value="{numTime1.value.toString()}" symbol="{fillSym1}"/>
				<esri:UniqueValueInfo value="{numTime2.value.toString()}" symbol="{fillSym2}"/>
				<esri:UniqueValueInfo value="{numTime3.value.toString()}" symbol="{fillSym3}"/>
			</esri:UniqueValueRenderer>
		</esri:renderer>
	</esri:GraphicsLayer>
	<viewer:WidgetTemplate id="wTemplate" width="400" height="246">
		<mx:ViewStack id="viewStack" width="100%" height="165" creationPolicy="all" paddingTop="4">
			<mx:VBox width="100%" height="100%" verticalGap="6">
				<mx:Form id="frmDraw" verticalScrollPolicy="off" paddingBottom="0" width="100%" paddingTop="0">
					<mx:Text text="{serviceareaLabel}" styleName="WidgetText" width="100%"/>
					<mx:FormItem label="{locationLabel}" styleName="WidgetText" width="100%">
						<mx:HBox>
							<!--<mx:TextInput id="txtLocation" text="" width="80%"/>-->
							<mx:Image click="activateTool()" source="assets/images/w_addstart.png" useHandCursor="true" buttonMode="true" toolTip="{addlocationLabel}" width="20" height="20"/>
						</mx:HBox>
					</mx:FormItem>
					<mx:Text text="{previouslocationLabel}" styleName="WidgetText" width="100%"/>
					<!--<mx:ComboBox id="cboPreviousLocations" change="{selectPreviousLocation()}"/>-->
					<mx:HRule styleName="BannerRule" width="100%"/>
					<mx:FormItem label="{intervalLabel}" styleName="WidgetText" width="100%">
						<mx:HBox width="100%">
							<mx:NumericStepper id="numTime1" minimum="0" maximum="15" value="1" width="45"/>
							<mx:NumericStepper id="numTime2" minimum="0" maximum="15" value="3"  width="45"/>
							<mx:NumericStepper id="numTime3" minimum="0" maximum="15" value="5"  width="45"/>
						</mx:HBox>
					</mx:FormItem>
				</mx:Form>
				<mx:HBox horizontalAlign="center" width="100%" horizontalGap="8">
					<mx:Button label="{submitLabel}" click="getServiceArea()"/>
					<mx:Button label="{clearLabel}" click="clear()"/>
				</mx:HBox>
				<mx:HBox id="boxMessage" visible="{msgVisible}" includeInLayout="{msgVisible}" width="100%">
					<mx:SWFLoader id="swfMessage" source="com/esri/solutions/flexviewer/assets/flash/loader.swf" visible="false" />
					<mx:Text id="txtMessage" text="" styleName="WidgetText" width="90%"/>
				</mx:HBox>
			</mx:VBox>
		</mx:ViewStack>
		<s:Button x="52" y="187" id="btnFill" label="Outline" width="83" height="25" fontSize="16" color="#FFFDFD" click="button1_clickHandler(event)"/>
	</viewer:WidgetTemplate>
	
</viewer:BaseWidget>
